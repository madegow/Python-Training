import os
import requests
import hashlib
import argparse
import zipfile
import shutil
import tempfile

API_KEY = '5bc92dc6f33eade5afd30e29763e97eec85ef75705bf3505a35a47944277effb'

def get_file_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    return sha256_hash.hexdigest()

def check_file(file_path):
    file_hash = get_file_hash(file_path)
    url = "https://www.virustotal.com/vtapi/v2/file/report"
    params = {'apikey': API_KEY, 'resource': file_hash}

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()  # Raise an HTTPError for bad responses
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error making request to VirusTotal for file '{file_path}': {e}")
        return None

def print_summary(vt_response, file_path):
    if vt_response is None:
        return

    print(f"\nScan results for: {file_path}")
    if 'response_code' in vt_response and vt_response['response_code'] == 1:
        print(f"Positives: {vt_response.get('positives', 0)} out of {vt_response.get('total', 0)} scanners")
    else:
        print("No results found in VirusTotal for the given input.")

def print_detailed_report(vt_response):
    if vt_response is None:
        return

    print("\nDetailed Report:")
    if 'response_code' in vt_response and vt_response['response_code'] == 1:
        print(f"Scan ID: {vt_response.get('scan_id')}")
        print(f"MD5: {vt_response.get('md5')}")
        print(f"SHA-1: {vt_response.get('sha1')}")
        print(f"SHA-256: {vt_response.get('sha256')}")

        print("\nScanners:")
        scanners = vt_response.get('scans', {})
        detected_scanners = [(scanner, result) for scanner, result in scanners.items() if result.get('detected', False)]
        undetected_scanners = [(scanner, result) for scanner, result in scanners.items() if not result.get('detected', False)]
        
        # Print detected scanners
        print("\nDetected Scanners:")
        for scanner, result in detected_scanners:
            threat_label = result.get('result', 'No threat detected')
            print(f"- {scanner}: {threat_label}")

        # Print undetected scanners
        print("\nUndetected Scanners:")
        for scanner, result in undetected_scanners:
            print(f"- {scanner}: Not detected")

    else:
        print("No results found in VirusTotal for the given input.")

def extract_files(zip_file_path, extraction_dir):
    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:
        zip_ref.extractall(extraction_dir)

def scan_files(directory):
    for root, _, files in os.walk(directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            vt_response = check_file(file_path)
            print_summary(vt_response, file_path)

            # Ask for detailed report if desired
            user_input = input("Would you like a detailed report? (y/n): ").strip().lower()
            if user_input == 'y':
                print_detailed_report(vt_response)

def scan_path(path):
    if os.path.isfile(path):
        if zipfile.is_zipfile(path):
            temp_dir = tempfile.mkdtemp()
            try:
                extract_files(path, temp_dir)
                scan_files(temp_dir)
            finally:
                shutil.rmtree(temp_dir)
        else:
            vt_response = check_file(path)
            print_summary(vt_response, path)
            user_input = input("Would you like a detailed report? (y/n): ").strip().lower()
            if user_input == 'y':
                print_detailed_report(vt_response)
    elif os.path.isdir(path):
        scan_files(path)
    else:
        print(f"Path '{path}' is not valid.")

def main():
    parser = argparse.ArgumentParser(description="Check files against VirusTotal.")
    parser.add_argument("path", help="Path to the file or directory to be checked.")
    args = parser.parse_args()
    scan_path(args.path)

if __name__ == "__main__":
    main()